import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.header import Header
from email.mime.image import MIMEImage
import configparser
import pyodbc
import pandas as pd
from datetime import datetime, timedelta
import codecs
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.colors import LinearSegmentedColormap
import base64
import logging

# === Konfiguracja Logowania ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("raport_generator.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# === Krok 1: Wczytaj dane konfiguracyjne ===
logging.info("Krok 1: Wczytywanie konfiguracji...")
config = configparser.ConfigParser()
try:
    with codecs.open('config.ini', 'r', encoding='utf-8') as f:
        config.read_file(f)
except FileNotFoundError:
    logging.error("Plik config.ini nie został znaleziony.")
    exit()
except Exception:
    logging.exception("Wystąpił krytyczny błąd podczas wczytywania pliku config.ini.")
    exit()

# Odczyt ustawień
sender_email = config.get('EMAIL', 'Sender')
receiver_email = config.get('EMAIL', 'Receiver')
smtp_server = config.get('EMAIL', 'SMTPServer')
subject = config.get('EMAIL', 'Subject')
conn_str = config.get('DATABASE', 'ConnectionString')
generate_plots = config.getboolean('REPORT_SETTINGS', 'GeneratePlots', fallback=True)

# Odczyt konfigurowalnych limitów z fallbackiem
try:
    TOTAL_LIMIT = config.getint('REPORT_SETTINGS', 'TotalConsultantLimit')
    DEPT_LIMIT = config.getint('REPORT_SETTINGS', 'DepartmentConsultantLimit')
except (configparser.Error, ValueError):
    logging.warning("Nie można odczytać limitów z config.ini. Używam domyślnych wartości (18/3).")
    TOTAL_LIMIT = 18
    DEPT_LIMIT = 3

limit_rbh = config.getfloat('REPORT_SETTINGS', 'MonthlyLimitRBH', fallback=1500.0) # Ensure this is read as well
logging.info("Konfiguracja wczytana pomyślnie.")

# === Krok 2: Wczytaj zapytania SQL z plików ===
logging.info("Krok 2: Wczytywanie zapytań SQL...")
try:
    with open("zapytanieREPLIKA.sql", "r", encoding="utf-8") as file:
        query_aktywnosci = file.read()
    # Your old code only had one query. Let's ensure query_koordynatorzy is handled gracefully.
    # For now, it will be an empty string if not found, as it's not strictly used for the requested plots.
    try:
        with open("zapytanieListaKoordynatorow.sql", "r", encoding="utf-8") as file:
            query_koordynatorzy = file.read()
    except FileNotFoundError:
        logging.warning("Plik zapytanieListaKoordynatorow.sql nie został znaleziony. Analiza koordynatorów może być ograniczona.")
        query_koordynatorzy = "" # Set to empty if not found
    logging.info("Zapytania SQL wczytane.")
except FileNotFoundError as e:
    logging.error(f"Plik SQL nie został znaleziony: {e.filename}")
    exit()
except Exception:
    logging.exception("Wystąpił błąd podczas wczytywania plików SQL.")
    exit()

# === Krok 3: Połącz się z bazą danych i pobierz dane ===
logging.info("Krok 3: Pobieranie danych z bazy...")
df_aktywnosci = pd.DataFrame()
df_koordynatorzy = pd.DataFrame() # Initialize as empty to prevent errors if file not found
try:
    conn = pyodbc.connect(conn_str)
    df_aktywnosci = pd.read_sql(query_aktywnosci, conn)
    if query_koordynatorzy: # Only attempt to read if the query string is not empty
        df_koordynatorzy = pd.read_sql(query_koordynatorzy, conn)
    conn.close()
    logging.info(f"Pobrano {len(df_aktywnosci)} rekordów aktywności.")
    logging.info(f"Pobrano {len(df_koordynatorzy)} wszystkich przełożonych (przed filtrowaniem).")
except pyodbc.Error as ex:
    sqlstate = ex.args[0]
    logging.error(f"Błąd połączenia z bazą danych lub wykonania zapytania: {sqlstate}")
    exit()
except Exception:
    logging.exception("Wystąpił nieoczekiwany błąd podczas operacji na bazie danych.")
    exit()

# === Krok 4: Przetwarzanie i czyszczenie danych ===
logging.info("Krok 4: Przetwarzanie i czyszczenie danych...")

# Your old code for filtering df_koordynatorzy was more complex.
# We need to retain the 'PrzelozonyLoginWindows' and 'Wydzial' columns for `intervals_df`
# even if koordynator filtering is not applied for these specific plots.
# The previous version of code that generated these plots did not use df_koordynatorzy after initial merge.

# Ensure df has 'PrzelozonyLoginWindows' and 'RolaNazwa' columns for calculate_seconds
if 'PrzelozonyLoginWindows' not in df_aktywnosci.columns:
    logging.warning("Brak kolumny 'PrzelozonyLoginWindows' w danych aktywności. Może to wpłynąć na dalszą analizę.")
    df_aktywnosci['PrzelozonyLoginWindows'] = None # Add it if missing

if 'RolaNazwa' not in df_aktywnosci.columns:
    logging.warning("Brak kolumny 'RolaNazwa' w danych aktywności. Może to wpłynąć na dalszą analizę.")
    df_aktywnosci['RolaNazwa'] = None # Add it if missing

# If df_aktywnosci is empty, create a dummy DataFrame for smooth execution
if df_aktywnosci.empty:
    logging.warning("Brak danych o aktywnościach do przetworzenia. Raport może być niekompletny.")
    df = pd.DataFrame(
        columns=['StatusDateTime', 'EndDateTime', 'UserId', 'Wydzial', 'PrzelozonyLoginWindows', 'RolaNazwa'])
    # Add a dummy row to avoid errors with .min().normalize()
    dummy_date = datetime.now()
    df.loc[0] = [dummy_date, dummy_date + timedelta(minutes=1), 'DummyUser', 'WZK1', 'DummyCoord', 'Agent']
else:
    df = df_aktywnosci.copy()
    df['StatusDateTime'] = pd.to_datetime(df['StatusDateTime'])
    df['EndDateTime'] = pd.to_datetime(df['EndDateTime'])

# Funkcja dzieląca sesje na godzinowe interwały (from previous version, simplified)
def calculate_seconds(row):
    start = row['StatusDateTime']
    end = row['EndDateTime']
    intervals = []
    while start < end:
        next_hour = (start + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
        if next_hour > end:
            next_hour = end
        seconds = (next_hour - start).total_seconds()
        # Ensure only columns used by the old script's aggregation are passed
        intervals.append((start.hour, seconds, row['UserId'], row['Wydzial']))
        start = next_hour
    return intervals

# Przetwarzanie interwałów
logging.info(" -> Obliczanie interwałów godzinowych...")
intervals = []
if not df.empty: # Check again after potential dummy data creation
    for _, row in df.iterrows():
        intervals.extend(calculate_seconds(row))

intervals_df = pd.DataFrame(intervals, columns=['Hour', 'Seconds', 'UserId', 'Wydzial'])
grouped = intervals_df.groupby('Hour').agg({'Seconds': 'sum'}).reset_index()
unique_users = intervals_df.groupby('Hour')['UserId'].nunique().reset_index()
unique_users.columns = ['Hour', 'UniqueConsultants']
grouped = pd.merge(grouped, unique_users, on='Hour', how='left').fillna(0)
all_hours = pd.DataFrame({'Hour': range(24)})
grouped = pd.merge(all_hours, grouped, on='Hour', how='left').fillna(0) # Ensure all 24 hours are present

def seconds_to_minutes(seconds):
    return round(seconds / 60)

grouped['Seconds'] = grouped['Seconds'].apply(seconds_to_minutes)
departments = ['WZK1', 'WZK2', 'WZK3', 'WZF', 'WNT', 'WZP']
for dept in departments:
    dept_seconds = intervals_df[intervals_df['Wydzial'] == dept].groupby('Hour')['Seconds'].sum().reset_index()
    dept_seconds.columns = ['Hour', dept]
    grouped = pd.merge(grouped, dept_seconds, on='Hour', how='left').fillna(0)
    grouped[dept] = grouped[dept].apply(seconds_to_minutes)

def max_simultaneous_consultants(df_current_hour, hour):
    base_date = df_current_hour['StatusDateTime'].dt.normalize().min() if not df_current_hour.empty else datetime.now().normalize()
    hour_start = base_date + pd.Timedelta(hours=hour)
    hour_end = hour_start + pd.Timedelta(hours=1)
    df_hour = df_current_hour[(df_current_hour['StatusDateTime'] < hour_end) & (df_current_hour['EndDateTime'] > hour_start)]
    timeline = []
    for _, row in df_hour.iterrows():
        start = max(row['StatusDateTime'], hour_start)
        end = min(row['EndDateTime'], hour_end)
        timeline.append((start, 1))
        timeline.append((end, -1))
    timeline.sort()

    active = 0
    over_total_limit_seconds = [0.0] * 6
    current_time = hour_start

    for time, change in timeline:
        if time > current_time:
            duration = (time - current_time).total_seconds()
            for i in range(6):
                if active >= (TOTAL_LIMIT + 1 + i):
                    over_total_limit_seconds[i] += duration
        active += change
        current_time = time
    
    # Handle any remaining duration until hour_end
    if current_time < hour_end:
        duration = (hour_end - current_time).total_seconds()
        for i in range(6):
            if active >= (TOTAL_LIMIT + 1 + i):
                over_total_limit_seconds[i] += duration

    # The max_interval finding from your previous code wasn't compatible with the new structure of this function.
    # Simplified to just return the over_total_limit_seconds, as that's what the plots use.
    return (0, pd.NaT, pd.NaT, *over_total_limit_seconds) # Dummy values for MaxConsultants and Start/End


def time_over_dept_limit(df_current_hour, hour, department):
    base_date = df_current_hour['StatusDateTime'].dt.normalize().min() if not df_current_hour.empty else datetime.now().normalize()
    hour_start = base_date + pd.Timedelta(hours=hour)
    hour_end = hour_start + pd.Timedelta(hours=1)
    df_hour_dept = df_current_hour[(df_current_hour['StatusDateTime'] < hour_end) & (df_current_hour['EndDateTime'] > hour_start) & (df_current_hour['Wydzial'] == department)]
    
    timeline = []
    for _, row in df_hour_dept.iterrows():
        start = max(row['StatusDateTime'], hour_start)
        end = min(row['EndDateTime'], hour_end)
        timeline.append((start, 1))
        timeline.append((end, -1))
    timeline.sort()

    active = 0
    over_limit_time = 0.0
    current_time = hour_start

    for time, change in timeline:
        if time > current_time:
            duration = (time - current_time).total_seconds()
            if active > DEPT_LIMIT:
                over_limit_time += duration
        active += change
        current_time = time
    
    # Handle any remaining duration until hour_end
    if current_time < hour_end:
        duration = (hour_end - current_time).total_seconds()
        if active > DEPT_LIMIT:
            over_limit_time += duration

    return over_limit_time


total_cols = [f'Over{TOTAL_LIMIT + 1 + i}ConsultantsMinutes' for i in range(6)]

results = grouped['Hour'].apply(lambda h: max_simultaneous_consultants(df, h))
result_cols = ['MaxConsultants', 'MaxConsultantsStart', 'MaxConsultantsEnd'] + total_cols
temp_df = pd.DataFrame(results.tolist(), columns=result_cols, index=grouped.index)
grouped = pd.concat([grouped, temp_df], axis=1)

for dept in departments:
    grouped[f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes'] = grouped['Hour'].apply(
        lambda h: time_over_dept_limit(df, h, dept))

cols_to_convert = total_cols + [f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes' for dept in departments]
for col in cols_to_convert:
    if col in grouped.columns: # Added check for column existence
        grouped[col] = grouped[col].apply(seconds_to_minutes)

logging.info("Dane dla raportu głównego przetworzone w całości.")


# === Krok 5: Zapisanie danych do pliku CSV ===
report_date_str_for_filename = df['StatusDateTime'].min().normalize().strftime(
    "%Y-%m-%d") if not df.empty else datetime.now().strftime("%Y-%m-%d")
csv_filename = f"raport_dzienny_{report_date_str_for_filename}.csv"
grouped.to_csv(csv_filename, index=False, encoding='utf-8-sig') # Changed to utf-8-sig for better Excel compatibility
logging.info(f"Krok 5: Dane raportu zostały zapisane do pliku: {csv_filename}")


# === Krok 6: Generowanie wizualizacji ===
image_buffers = []
if generate_plots:
    logging.info("Krok 6: Generowanie wizualizacji...")
    
    # Adopted plotting styles from your old code
    plt.style.use('default')
    sns.set_palette("husl")
    plt.rcParams['font.family'] = 'sans-serif' # Kept Arial from your previous request
    plt.rcParams['font.sans-serif'] = ['Arial']


    # --- WYKRES 1: Czas przeciążenia systemu (formerly Suma minut przekroczenia w danym interwale) ---
    logging.info(" -> Generowanie Wykresu 1: Czas przeciążenia systemu...")
    
    # Use figsize from old code, adjusted to maintain proportions if needed
    fig, ax = plt.subplots(figsize=(16, 10)) # Adopted from old code, smaller than last request, check if OK
    
    heatmap_data_przekroczenia = grouped[total_cols].T
    heatmap_data_przekroczenia.columns = [f"{h:02d}:00" for h in grouped['Hour']]
    heatmap_data_przekroczenia.index = [f'≥{TOTAL_LIMIT + 1 + i} osób' for i in range(6)]
    
    # Colors from old code
    colors_red = ['#ffffff', '#ffe6e6', '#ffcccc', '#ff9999', '#ff6666', '#ff3333', '#cc0000']
    cmap_red = LinearSegmentedColormap.from_list('custom_red', colors_red, N=100)
    
    im = ax.imshow(heatmap_data_przekroczenia.values, cmap=cmap_red, aspect='auto', interpolation='nearest', vmin=0)
    
    # Grid from old code
    ax.grid(which='minor', color='gray', linestyle='-', linewidth=0.5, alpha=0.3)
    ax.set_xticks(np.arange(heatmap_data_przekroczenia.shape[1] + 1) - .5, minor=True)
    ax.set_yticks(np.arange(heatmap_data_przekroczenia.shape[0] + 1) - .5, minor=True)
    ax.tick_params(which="minor", bottom=False, left=False) # Remove minor tick marks themselves

    ax.set_xlim(-0.5, len(heatmap_data_przekroczenia.columns) - 0.5);
    ax.set_ylim(-0.5, len(heatmap_data_przekroczenia.index) - 0.5)

    ax.set_xticks(range(0, len(heatmap_data_przekroczenia.columns), 2));
    ax.set_xticklabels(
        [heatmap_data_przekroczenia.columns[i] for i in range(0, len(heatmap_data_przekroczenia.columns), 2)],
        fontsize=11, rotation=45) # Fontsize 11 from old code
    
    ax.set_yticks(range(len(heatmap_data_przekroczenia.index)));
    ax.set_yticklabels(heatmap_data_przekroczenia.index, fontsize=12, fontweight='bold') # Fontsize 12 bold from old code
    
    for i in range(len(heatmap_data_przekroczenia.index)):
        for j in range(len(heatmap_data_przekroczenia.columns)):
            value = heatmap_data_przekroczenia.iloc[i, j]
            if value > 0:
                text_color = 'white' if value > heatmap_data_przekroczenia.values.max() * 0.6 else 'black'
                ax.text(j, i, f'{int(value)}', ha='center', va='center', fontsize=10, fontweight='bold', # Fontsize 10 bold from old code
                        color=text_color)
    
    cbar = plt.colorbar(im, ax=ax, shrink=0.8, aspect=30);
    cbar.set_label('Minuty przeciążenia', fontsize=12, fontweight='bold'); # Fontsize 12 bold from old code
    cbar.ax.tick_params(labelsize=11) # Fontsize 11 from old code
    
    plt.title('Czas przeciążenia systemu (minuty)', fontsize=16, fontweight='bold', pad=20) # Title & style from old code
    ax.set_xlabel('Godzina', fontsize=14, fontweight='bold'); # Fontsize 14 bold from old code
    ax.set_ylabel('Próg liczby konsultantów', fontsize=14, fontweight='bold') # Fontsize 14 bold from old code
    
    plt.tight_layout() # From old code

    img_buffer_1 = io.BytesIO()
    plt.savefig(img_buffer_1, format='png', dpi=300, bbox_inches='tight', facecolor='white')
    img_buffer_1.seek(0)
    image_buffers.append(img_buffer_1)
    plt.close()


    # --- WYKRES 2: Dashboard przeciążeń działów (formerly Dashboard naruszeń limitów wydziałowych) ---
    logging.info(" -> Generowanie Wykresu 2: Dashboard przeciążeń działów...")

    fig = plt.figure(figsize=(18, 12)) # Adopted from old code, larger
    ax_main = plt.subplot2grid((4, 4), (0, 0), colspan=3, rowspan=3) # Adopted layout from old code
    
    dept_heatmap_cols = [f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes' for dept in departments]
    df_heatmap_wydzialy = grouped.set_index('Hour')[dept_heatmap_cols].T
    df_heatmap_wydzialy = df_heatmap_wydzialy.reindex(columns=range(24)).fillna(0)
    df_heatmap_wydzialy.index = departments
    
    colors_blue = ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#084594']
    cmap_blue = LinearSegmentedColormap.from_list('custom_blue', colors_blue, N=100)
    
    im = ax_main.imshow(df_heatmap_wydzialy.values, cmap=cmap_blue, aspect='auto', interpolation='nearest', vmin=0) # vmin=0 added
    
    ax_main.set_xlim(-0.5, len(df_heatmap_wydzialy.columns) - 0.5);
    ax_main.set_ylim(-0.5, len(df_heatmap_wydzialy.index) - 0.5)
    
    ax_main.set_xticks(range(0, len(df_heatmap_wydzialy.columns), 2));
    ax_main.set_xticklabels([df_heatmap_wydzialy.columns[i] for i in range(0, len(df_heatmap_wydzialy.columns), 2)], fontsize=11, rotation=45) # Fontsize 11 from old code
    
    ax_main.set_yticks(range(len(df_heatmap_wydzialy.index)));
    ax_main.set_yticklabels(df_heatmap_wydzialy.index, fontsize=12, fontweight='bold') # Fontsize 12 bold from old code
    
    for i in range(len(df_heatmap_wydzialy.index)):
        for j in range(len(df_heatmap_wydzialy.columns)):
            value = df_heatmap_wydzialy.iloc[i, j]
            if value > 0:
                text_color = 'white' if value > df_heatmap_wydzialy.values.max() * 0.6 else 'black'
                ax_main.text(j, i, f'{int(value)}', ha='center', va='center', fontsize=9, fontweight='bold', # Fontsize 9 bold from old code
                             color=text_color)
    
    ax_main.set_title(f'Dashboard przeciążeń działów (minuty z >{DEPT_LIMIT} konsultantami)', fontsize=14, fontweight='bold', pad=15) # Title & style from old code
    ax_main.set_ylabel('Dział', fontsize=12, fontweight='bold') # Label & style from old code

    # Right bar chart
    ax_right = plt.subplot2grid((4, 4), (0, 3), rowspan=3)
    dept_sums = [grouped[f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes'].sum() for dept in departments]
    colors_dept = plt.cm.Set3(np.linspace(0, 1, len(departments)))
    bars_right = ax_right.barh(range(len(departments)), dept_sums, color=colors_dept, alpha=0.8)
    ax_right.set_yticks(range(len(departments)));
    ax_right.set_yticklabels(departments, fontsize=10) # Fontsize 10 from old code
    ax_right.set_xlabel('Suma minut', fontsize=11, fontweight='bold'); # Label & style from old code
    ax_right.set_title('Suma\nna dział', fontsize=12, fontweight='bold') # Title & style from old code
    max_dept_sum = max(dept_sums) if dept_sums else 1
    for i, (bar, value) in enumerate(zip(bars_right, dept_sums)):
        if value > 0:
            current_color_rgb = [x * 255 for x in bar.get_facecolor()[:3]]
            text_color_right = 'black' if sum(current_color_rgb) / 3 > 180 else 'white'
            if value / max_dept_sum < 0.15: # Specific text positioning logic from old code
                text_x_pos = bar.get_width() + (max_dept_sum * 0.01); ha_align = 'left'; text_color_right = 'black'
            else:
                text_x_pos = bar.get_x() + bar.get_width() * 0.25; ha_align = 'left'
            ax_right.text(text_x_pos, bar.get_y() + bar.get_height() / 2, f'{int(value)}', ha=ha_align, va='center',
                            fontsize=10, fontweight='bold', color=text_color_right) # Fontsize 10 bold from old code
    
    # Bottom bar chart
    ax_bottom = plt.subplot2grid((4, 4), (3, 0), colspan=3) # Adopted layout from old code
    hour_sums = [grouped[dept_heatmap_cols].iloc[h].sum() for h in range(24)]
    bars_bottom = ax_bottom.bar(range(24), hour_sums, color='steelblue', alpha=0.7)
    ax_bottom.set_xlim(-0.5, 23.5);
    ax_bottom.set_xticks(range(0, 24, 2));
    ax_bottom.set_xticklabels([f"{h:02d}:00" for h in range(0, 24, 2)], fontsize=10) # Fontsize 10 from old code
    ax_bottom.set_xlabel('Godzina', fontsize=11, fontweight='bold'); # Label & style from old code
    ax_bottom.set_ylabel('Suma minut', fontsize=11, fontweight='bold'); # Label & style from old code
    ax_bottom.set_title('Suma na godzinę', fontsize=12, fontweight='bold') # Title & style from old code
    max_hour_sum = max(hour_sums) if hour_sums else 1
    for i, (bar, value) in enumerate(zip(bars_bottom, hour_sums)):
        if value > 0:
            text_color_bottom = 'white' if value / max_hour_sum > 0.3 else 'black'
            if value / max_hour_sum < 0.1: # Specific text positioning logic from old code
                text_y_pos = bar.get_height() + 5; va_align = 'bottom'; text_color_bottom = 'black'
            else:
                text_y_pos = bar.get_height() * 0.7; va_align = 'center'
            ax_bottom.text(bar.get_x() + bar.get_width() / 2, text_y_pos, f'{int(value)}', ha='center', va=va_align,
                            fontsize=9, fontweight='bold', color=text_color_bottom) # Fontsize 9 bold from old code
    
    cbar = plt.colorbar(im, ax=ax_main, shrink=0.8, aspect=20);
    cbar.set_label('Minuty', fontsize=11, fontweight='bold') # Label & style from old code
    plt.tight_layout(pad=2.0) # From old code

    img_buffer_2 = io.BytesIO() # Renamed to img_buffer_2 to be consistent with indexing
    plt.savefig(img_buffer_2, format='png', dpi=300, bbox_inches='tight', facecolor='white')
    img_buffer_2.seek(0)
    image_buffers.append(img_buffer_2)
    plt.close()

    logging.info("Wszystkie wizualizacje wygenerowane.")
else:
    logging.warning("Generowanie wizualizacji pominięte (zgodnie z konfiguracją).")

# === Krok 7: Budowanie finalnej treści HTML e-maila ===
logging.info("Krok 7: Budowanie treści e-maila...")

# Ensure limit_rbh is defined if not read from config earlier
try:
    limit_rbh = config.getfloat('REPORT_SETTINGS', 'MonthlyLimitRBH')
except (configparser.Error, ValueError):
    logging.warning("Brak 'MonthlyLimitRBH' w config.ini. Używam domyślnej wartości 1500.")
    limit_rbh = 1500.0

total_seconds_today = intervals_df['Seconds'].sum()
used_rbh = total_seconds_today / 3600.0
remaining_rbh = limit_rbh - used_rbh
limit_rbh_formatted = f"{limit_rbh:.2f}"
used_rbh_formatted = f"{used_rbh:.2f}"
remaining_rbh_formatted = f"{remaining_rbh:.2f}"

report_date = df['StatusDateTime'].min().normalize() if not df.empty else datetime.now().normalize()
day_names_polish = {'Monday': 'Poniedziałek', 'Tuesday': 'Wtorek', 'Wednesday': 'Środa', 'Thursday': 'Czwartek',
                    'Friday': 'Piątek', 'Saturday': 'Sobota', 'Sunday': 'Niedziela'}
english_day = report_date.strftime("%A")
polish_day = day_names_polish.get(english_day, english_day)
today_str = report_date.strftime(f"%Y-%m-%d {polish_day}")

header_titles = [("Interwał", 60)]
for i in range(6):
    header_titles.append((f"min. przy ≥{TOTAL_LIMIT + 1 + i} os.", 40))
for dept in departments:
    header_titles.append((f"min. przy >{DEPT_LIMIT} {dept}", 40))

final_html_content = f"""\
<!DOCTYPE html>
<html>
<head>
<meta name="color-scheme" content="light dark">
<meta name="supported-color-schemes" content="light dark">
</head>
<body style="background-color:#ffffff;">
<p style="font-family: Arial, sans-serif; font-size:12px; color:#000000; background-color:#ffffff;">
<strong>Data:</strong> {today_str}<br>
<strong>Limit w tym miesiącu:</strong> {limit_rbh_formatted} RBH<br>
<strong>Wykorzystano:</strong> {used_rbh_formatted} RBH<br>
<strong>Pozostało:</strong> {remaining_rbh_formatted} RBH</p>
"""

total_violation_occurred = grouped[f'Over{TOTAL_LIMIT + 1}ConsultantsMinutes'].sum() > 0
dept_violation_occurred = sum(grouped[f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes'].sum() for dept in departments) > 0

if total_violation_occurred or dept_violation_occurred:
    alert_message = "ALERT: Wykryto przekroczenia limitów!"
    alert_color = "#c82333"
else:
    alert_message = "OK: Nie wykryto przekroczeń limitów."
    alert_color = "#28a745"

final_html_content += f"""
<p style="font-family: Arial, sans-serif; font-size:14px; font-weight:bold; color:white; background-color:{alert_color}; padding: 10px; border-radius: 5px; text-align:center;">
{alert_message}
</p>
"""

final_html_content += '<table border="1" cellpadding="3" cellspacing="0" width="900" style="border-collapse:collapse; background-color:#ffffff;"><tr>'
for title, width in header_titles:
    final_html_content += f'<th style="font-family: Arial, sans-serif; font-size:9px; width:{width}px; background-color:#e0e0e0; color:#000000; text-align:center;">{title}</th>'
final_html_content += "</tr>"

for idx, row in grouped.iterrows():
    row_bg_color = "#f2f2f2" if idx % 2 == 0 else "#ffffff"
    final_html_content += "<tr>"
    final_html_content += f'<td style="font-family: Arial, sans-serif; font-size:9px; width:60px; background-color:{row_bg_color}; color:#000000; text-align:center;">{row["Hour"]:02}:00</td>'

    for col in total_cols:
        val = row[col]
        display = '' if val == 0 else f'<b>{int(val)}</b>' # Ensured int() for consistent display
        cell_bg_color = '#ffcccc' if val > 0 else row_bg_color
        final_html_content += f'<td style="font-family: Arial, sans-serif; font-size:9px; width:40px; background-color:{cell_bg_color}; color:#000000; text-align:center;">{display}</td>'

    for dept in departments:
        col = f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes'
        val = row[col]
        display = '' if val == 0 else f'<b>{int(val)}</b>' # Ensured int() for consistent display
        cell_bg_color = '#ffcccc' if val > 0 else row_bg_color
        final_html_content += f'<td style="font-family: Arial, sans-serif; font-size:9px; width:40px; background-color:{cell_bg_color}; color:#000000; text-align:center;">{display}</td>'
    final_html_content += "</tr>"

final_html_content += '<tr><td style="font-family: Arial, sans-serif; font-size:9px; width:60px; background-color:#e0e0e0; color:#000000; text-align:center;"><strong>Suma</strong></td>'
for col in total_cols + [f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes' for dept in departments]:
    total_sum = grouped[col].sum()
    display_sum = '' if total_sum == 0 else f'<b>{int(total_sum)}</b>' # Ensured int() for consistent display
    sum_bg_color = '#ffcccc' if total_sum > 0 else '#e0e0e0'
    final_html_content += f'<td style="font-family: Arial, sans-serif; font-size:9px; width:40px; background-color:{sum_bg_color}; color:#000000; text-align:center;">{display_sum}</td>'
final_html_content += "</tr></table>"

if generate_plots and image_buffers:
    # Adding padding between table and first image
    final_html_content += '<table border="0" cellpadding="0" cellspacing="0" width="100%" style="font-size:1px;line-height:1px;"><tr><td height="20" style="font-size: 20px; line-height: 20px;">&nbsp;</td></tr></table>'
    for i, _ in enumerate(image_buffers):
        # Setting HTML image width to 900px, consistent with the table above
        final_html_content += f'<table border="0" cellpadding="0" cellspacing="0" width="900" align="left"><tr><td><img src="cid:image{i}" width="900" style="width: 900px; max-width: 100%; height: auto; display: block;"></td></tr></table>'
        # Adding padding between images
        final_html_content += '<table border="0" cellpadding="0" cellspacing="0" width="100%" style="font-size:1px;line-height:1px;"><tr><td height="20" style="font-size: 20px; line-height: 20px;">&nbsp;</td></tr></table>'


final_html_content += "</body></html>"

# === Krok 8: Wyślij e-mail z osadzonymi wizualizacjami ===
logging.info("Krok 8: Wysyłanie e-maila...")
msg = MIMEMultipart('related')
msg['From'] = sender_email
msg['To'] = receiver_email
msg['Subject'] = Header(subject, 'utf-8')
html_part = MIMEText(final_html_content, 'html', 'utf-8')
msg.attach(html_part)

if generate_plots:
    for i, img_buffer in enumerate(image_buffers):
        img_buffer.seek(0)
        img = MIMEImage(img_buffer.read())
        img.add_header('Content-ID', f'<image{i}>')
        img.add_header('Content-Disposition', 'inline', filename=f'wykres_{i + 1}.png')
        img_buffer.close()
        msg.attach(img)

try:
    with smtplib.SMTP(smtp_server) as server:
        server.sendmail(sender_email, receiver_email.split(','), msg.as_string()) # Ensure receiver_email is split if it contains multiple addresses
    logging.info("E-mail został pomyślnie wysłany!")
except Exception:
    logging.exception("Wystąpił błąd podczas wysyłania e-maila.")

logging.info("--- Zakończono pracę skryptu ---")
