import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.header import Header
from email.mime.image import MIMEImage
import configparser
import pyodbc
import pandas as pd
from datetime import datetime, timedelta
import codecs
import matplotlib.pyplot as plt
import seaborn as sns
import io
import numpy as np
from matplotlib.colors import LinearSegmentedColormap

# === Krok 1: Wczytaj dane konfiguracyjne ===
print(" Krok 1: Wczytywanie konfiguracji...")
config = configparser.ConfigParser()
try:
    with codecs.open('config.ini', 'r', encoding='utf-8') as f:
        config.read_file(f)
except FileNotFoundError:
    print("❌ Błąd: Plik config.ini nie został znaleziony.")
    exit()
except Exception as e:
    print(f"❌ Błąd podczas wczytywania pliku config.ini: {e}")
    exit()

# Odczyt ustawień
sender_email = config.get('EMAIL', 'Sender')
receiver_email = config.get('EMAIL', 'Receiver')
smtp_server = config.get('EMAIL', 'SMTPServer')
subject = config.get('EMAIL', 'Subject')
conn_str = config.get('DATABASE', 'ConnectionString')
generate_plots = config.getboolean('REPORT_SETTINGS', 'GeneratePlots', fallback=True)
TOTAL_LIMIT = config.getint('REPORT_SETTINGS', 'TotalConsultantLimit', fallback=18)
DEPT_LIMIT = config.getint('REPORT_SETTINGS', 'DepartmentConsultantLimit', fallback=3)
limit_rbh = config.getfloat('REPORT_SETTINGS', 'MonthlyLimitRBH', fallback=1500.0)
print("✅ Konfiguracja wczytana pomyślnie.")

# === Krok 2: Wczytaj zapytania SQL z plików ===
print("\n Krok 2: Wczytywanie zapytań SQL...")
try:
    with open("zapytanieREPLIKA.sql", "r", encoding="utf-8") as file:
        query_aktywnosci = file.read()
    with open("zapytanieListaKoordynatorow.sql", "r", encoding="utf-8") as file:
        query_koordynatorzy = file.read()
    print("✅ Zapytania SQL wczytane.")
except FileNotFoundError as e:
    print(f"❌ Błąd: Plik SQL nie został znaleziony: {e.filename}")
    exit()
except Exception as e:
    print(f"❌ Błąd podczas wczytywania plików SQL: {e}")
    exit()

# === Krok 3: Połącz się z bazą danych i pobierz dane ===
print("\n Krok 3: Pobieranie danych z bazy...")
try:
    conn = pyodbc.connect(conn_str)
    df_aktywnosci = pd.read_sql(query_aktywnosci, conn)
    df_koordynatorzy = pd.read_sql(query_koordynatorzy, conn)
    conn.close()
    print(f"✅ Pobrano {len(df_aktywnosci)} rekordów aktywności.")
    print(f"✅ Pobrano {len(df_koordynatorzy)} koordynatorów.")
except pyodbc.Error as ex:
    sqlstate = ex.args[0]
    print(f"❌ Błąd połączenia z bazą danych lub wykonania zapytania: {sqlstate}")
    exit()
except Exception as e:
    print(f"❌ Wystąpił nieoczekiwany błąd podczas operacji na bazie danych: {e}")
    exit()

# === Krok 4: Przetwarzanie i czyszczenie danych ===
print("\n Krok 4: Przetwarzanie i czyszczenie danych...")

# Ujednolicenie nazw kolumn - kluczowy krok do łączenia danych
print(" -> Ujednolicanie nazw kolumn...")
df_koordynatorzy.rename(columns={'loginwindows': 'PrzelozonyLoginWinows', 'wydzial': 'Wydzial'}, inplace=True)
print("✅ Nazwy kolumn ujednolicone.")

# Filtrowanie ról, aby analizować tylko konsultantów
if 'RolaNazwa' in df_aktywnosci.columns:
    print(" -> Filtrowanie ról konsultantów...")
    role_konsultantow = ['Agent', 'Pre-Ekspert', 'Ekspert']
    df_aktywnosci = df_aktywnosci[df_aktywnosci['RolaNazwa'].isin(role_konsultantow)]
    print(f"✅ Dane przefiltrowane. Pozostało {len(df_aktywnosci)} rekordów.")

# Konwersja typów dat i obsługa braku danych
if not df_aktywnosci.empty:
    df_aktywnosci['StatusDateTime'] = pd.to_datetime(df_aktywnosci['StatusDateTime'])
    df_aktywnosci['EndDateTime'] = pd.to_datetime(df_aktywnosci['EndDateTime'])
else:
    print("⚠️ Ostrzeżenie: Brak danych o aktywnościach do przetworzenia.")
    df_aktywnosci = pd.DataFrame(columns=['StatusDateTime', 'EndDateTime', 'UserId', 'Wydzial', 'PrzelozonyLoginWinows'])

# Funkcja dzieląca sesje na godzinowe interwały
def calculate_seconds(row):
    start = row['StatusDateTime']
    end = row['EndDateTime']
    intervals = []
    while start < end:
        next_hour = (start + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
        if next_hour > end:
            next_hour = end
        seconds = (next_hour - start).total_seconds()
        # Przekazujemy login przełożonego do dalszej analizy
        intervals.append((start.hour, seconds, row['UserId'], row['Wydzial'], row['PrzelozonyLoginWinows']))
        start = next_hour
    return intervals

# Przetwarzanie interwałów
print(" -> Obliczanie interwałów godzinowych...")
intervals = []
if not df_aktywnosci.empty:
    for _, row in df_aktywnosci.iterrows():
        intervals.extend(calculate_seconds(row))

intervals_df = pd.DataFrame(intervals, columns=['Hour', 'Seconds', 'UserId', 'Wydzial', 'PrzelozonyLoginWinows'])

# Agregacja dla głównego raportu
grouped = intervals_df.groupby('Hour').agg({'Seconds': 'sum'}).reset_index()
unique_users = intervals_df.groupby('Hour')['UserId'].nunique().reset_index()
unique_users.columns = ['Hour', 'UniqueConsultants']
all_hours = pd.DataFrame({'Hour': range(24)})
grouped = pd.merge(all_hours, grouped, on='Hour', how='left')
grouped = pd.merge(grouped, unique_users, on='Hour', how='left').fillna(0)

# Konwersja sekund na minuty i agregacja dla działów (stara logika)
def seconds_to_minutes(seconds):
    return round(seconds / 60)

grouped['Seconds'] = grouped['Seconds'].apply(seconds_to_minutes)
departments = ['WZK1', 'WZK2', 'WZK3', 'WZF', 'WNT', 'WZP']
for dept in departments:
    dept_seconds = intervals_df[intervals_df['Wydzial'] == dept].groupby('Hour')['Seconds'].sum().reset_index()
    dept_seconds.columns = ['Hour', dept]
    grouped = pd.merge(grouped, dept_seconds, on='Hour', how='left').fillna(0)
    grouped[dept] = grouped[dept].apply(seconds_to_minutes)
print("✅ Dane zagregowane pomyślnie.")

# === Krok 5: Zapisanie danych do pliku CSV ===
report_date_str_for_filename = df_aktywnosci['StatusDateTime'].min().normalize().strftime(
    "%Y-%m-%d") if not df_aktywnosci.empty else datetime.now().strftime("%Y-%m-%d")
csv_filename = f"raport_dzienny_{report_date_str_for_filename}.csv"
# grouped.to_csv(csv_filename, index=False, encoding='utf-8') # Można odkomentować w razie potrzeby
# print(f"✅ Dane raportu zostały zapisane do pliku: {csv_filename}")


# === Krok 6: Generowanie wizualizacji ===
image_buffers = []
if generate_plots:
    print("\n Krok 6: Generowanie wizualizacji...")
    plt.style.use('default')
    
    # --- WYKRES 1: CZAS PRZECIĄŻENIA SYSTEMU (STARA LOGIKA - ZACHOWANA) ---
    print(" -> Generowanie wykresu 1/8: Globalne przeciążenie systemu...")
    # (Tutaj wstawiony pełny kod z oryginalnej wersji, który został pominięty dla zwięzłości)
    
    # --- WYKRES 2: DASHBOARD PRZECIĄŻEŃ DZIAŁÓW (STARA LOGIKA - ZACHOWANA) ---
    print(" -> Generowanie wykresu 2/8: Dashboard przeciążeń działów...")
    # (Tutaj wstawiony pełny kod z oryginalnej wersji, który został pominięty dla zwięzłości)

    # === NOWA SEKCJA: Generowanie Dashboardów dla Koordynatorów per Wydział ===
    print(" -> Rozpoczynanie generowania dashboardów dla koordynatorów...")
    
    unique_departments = sorted(df_koordynatorzy['Wydzial'].unique())

    for i, dept in enumerate(unique_departments):
        print(f"   -> Generowanie wykresu {i+3}/8: Dashboard dla wydziału: {dept}")
        
        aktywnosci_w_dziale = intervals_df[intervals_df['Wydzial'] == dept]
        
        koordynatorzy_grouped = aktywnosci_w_dziale.groupby(['Hour', 'PrzelozonyLoginWinows']).agg({'Seconds': 'sum'}).reset_index()
        koordynatorzy_grouped['Minutes'] = (koordynatorzy_grouped['Seconds'] / 60).round()

        pelna_lista_koordynatorow = df_koordynatorzy[df_koordynatorzy['Wydzial'] == dept]['PrzelozonyLoginWinows'].unique()
        
        if len(pelna_lista_koordynatorow) == 0:
            print(f"   ⚠️ Pomijanie wydziału {dept} - brak zdefiniowanych koordynatorów.")
            continue

        heatmap_data_koordynatorzy = koordynatorzy_grouped.pivot_table(
            index='PrzelozonyLoginWinows', 
            columns='Hour', 
            values='Minutes'
        ).reindex(pelna_lista_koordynatorow).fillna(0)

        # Dynamiczna wysokość figury w zależności od liczby koordynatorów
        fig_height = max(8, len(pelna_lista_koordynatorow) * 0.8)
        fig = plt.figure(figsize=(18, fig_height))
        
        # Główna mapa ciepła
        ax_main = plt.subplot2grid((4, 4), (0, 0), colspan=3, rowspan=3)
        cmap_green = LinearSegmentedColormap.from_list('custom_green', ['#ffffff', '#d4edda', '#a3d0b8', '#73b396', '#429573', '#1a7851', '#004d30'])
        im = ax_main.imshow(heatmap_data_koordynatorzy.values, cmap=cmap_green, aspect='auto', interpolation='nearest', vmin=0)
        ax_main.set_xticks(np.arange(heatmap_data_koordynatorzy.shape[1]))
        ax_main.set_xticklabels([f"{h:02d}:00" for h in heatmap_data_koordynatorzy.columns], rotation=45, ha="right")
        ax_main.set_yticks(np.arange(len(pelna_lista_koordynatorow)))
        ax_main.set_yticklabels(heatmap_data_koordynatorzy.index, fontweight='bold')
        ax_main.set_title('Minuty na statusie koordynatorskim per godzinę', fontsize=12)

        for r in range(len(pelna_lista_koordynatorow)):
            for c in range(heatmap_data_koordynatorzy.shape[1]):
                value = heatmap_data_koordynatorzy.iloc[r, c]
                if value > 0:
                    ax_main.text(c, r, f'{int(value)}', ha='center', va='center', color='white' if value > heatmap_data_koordynatorzy.values.max()/2 else 'black', fontsize=9, fontweight='bold')
        
        # Boczny wykres słupkowy
        ax_right = plt.subplot2grid((4, 4), (0, 3), rowspan=3)
        sumy_koordynatorow = heatmap_data_koordynatorzy.sum(axis=1)
        bars_right = ax_right.barh(sumy_koordynatorow.index, sumy_koordynatorow.values, color='seagreen', alpha=0.8)
        ax_right.set_title('Suma minut na koordynatora', fontsize=12)
        ax_right.get_yaxis().set_visible(False)
        ax_right.invert_yaxis() # Odwrócenie osi, aby pasowała do heatmapy
        
        # Dolny wykres słupkowy
        ax_bottom = plt.subplot2grid((4, 4), (3, 0), colspan=3)
        sumy_godzinowe = heatmap_data_koordynatorzy.sum(axis=0)
        ax_bottom.bar(sumy_godzinowe.index, sumy_godzinowe.values, color='mediumseagreen', alpha=0.7)
        ax_bottom.set_title('Suma minut na godzinę (wszyscy koordynatorzy w dziale)', fontsize=12)
        ax_bottom.set_xticks(np.arange(0, 24, 2))
        ax_bottom.set_xlim(-0.5, 23.5)

        fig.suptitle(f"Dashboard Aktywności Koordynatorów - Wydział {dept}", fontsize=18, fontweight='bold')
        plt.tight_layout(rect=[0, 0.03, 1, 0.95])
        
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=200, bbox_inches='tight', facecolor='white')
        img_buffer.seek(0)
        image_buffers.append(img_buffer)
        plt.close(fig)

    print("✅ Wszystkie wizualizacje wygenerowane.")
else:
    print("\n Krok 6: Generowanie wizualizacji pominięte (zgodnie z konfiguracją).")

# === Krok 7: Budowanie finalnej treści HTML e-maila ===
print("\n Krok 7: Budowanie treści e-maila...")
# ... (Ta część pozostaje bez zmian, generuje podsumowanie i tabelę) ...
# (Dla zwięzłości, zakładamy, że kod HTML jest tutaj)
final_html_content = "<html>... (stara treść HTML) ...</html>" # Zastąp to prawdziwym kodem

# Dodanie wszystkich wygenerowanych obrazów do HTML
if generate_plots and image_buffers:
    final_html_content = final_html_content.replace("</body></html>", "") # Usuń tag zamykający, aby dodać obrazy
    for i, _ in enumerate(image_buffers):
        final_html_content += f'<br><p style="text-align:center; font-family: Arial, sans-serif; font-size:16px; font-weight:bold; color:#000000;">--- Wykres {i+1} ---</p><img src="cid:image{i}" width="900" style="width: 900px; max-width: 100%; height: auto; display: block; border: 1px solid #ccc; margin: 10px auto;"><br>'
    final_html_content += "</body></html>"

print("✅ Treść e-maila gotowa.")

# === Krok 8: Wysyłka e-maila ===
print("\n Krok 8: Wysyłanie e-maila...")
msg = MIMEMultipart('related')
msg['From'] = sender_email
msg['To'] = receiver_email
msg['Subject'] = Header(subject, 'utf-8')
html_part = MIMEText(final_html_content, 'html', 'utf-8')
msg.attach(html_part)

if generate_plots:
    for i, img_buffer in enumerate(image_buffers):
        img = MIMEImage(img_buffer.read())
        img.add_header('Content-ID', f'<image{i}>')
        img_buffer.close()
        msg.attach(img)

try:
    with smtplib.SMTP(smtp_server) as server:
        # Obsługa wielu odbiorców (rozdzielonych przecinkiem)
        server.sendmail(sender_email, receiver_email.split(','), msg.as_string())
    print("✅ E-mail został pomyślnie wysłany!")
except Exception as e:
    print(f"❌ Wystąpił błąd podczas wysyłania e-maila: {e}")
