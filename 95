import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.header import Header
from email.mime.image import MIMEImage
import configparser
import pyodbc
import pandas as pd
from datetime import datetime, timedelta
import codecs
import matplotlib.pyplot as plt
import seaborn as sns
import io
import numpy as np
from matplotlib.colors import LinearSegmentedColormap

# === Krok 1: Wczytaj dane konfiguracyjne ===
print(" Krok 1: Wczytywanie konfiguracji...")
config = configparser.ConfigParser()
try:
    with codecs.open('config.ini', 'r', encoding='utf-8') as f:
        config.read_file(f)
except FileNotFoundError:
    print("❌ Błąd: Plik config.ini nie został znaleziony.")
    exit()
except Exception as e:
    print(f"❌ Błąd podczas wczytywania pliku config.ini: {e}")
    exit()

# Odczyt ustawień
sender_email = config.get('EMAIL', 'Sender')
receiver_email = config.get('EMAIL', 'Receiver')
smtp_server = config.get('EMAIL', 'SMTPServer')
subject = config.get('EMAIL', 'Subject')
conn_str = config.get('DATABASE', 'ConnectionString')
generate_plots = config.getboolean('REPORT_SETTINGS', 'GeneratePlots', fallback=True)
TOTAL_LIMIT = config.getint('REPORT_SETTINGS', 'TotalConsultantLimit', fallback=18)
DEPT_LIMIT = config.getint('REPORT_SETTINGS', 'DepartmentConsultantLimit', fallback=3)
limit_rbh = config.getfloat('REPORT_SETTINGS', 'MonthlyLimitRBH', fallback=1500.0)
print("✅ Konfiguracja wczytana pomyślnie.")

# === Krok 2: Wczytaj zapytania SQL z plików ===
print("\n Krok 2: Wczytywanie zapytań SQL...")
try:
    with open("zapytanieREPLIKA.sql", "r", encoding="utf-8") as file:
        query_aktywnosci = file.read()
    with open("zapytanieListaKoordynatorow.sql", "r", encoding="utf-8") as file:
        query_koordynatorzy = file.read()
    print("✅ Zapytania SQL wczytane.")
except FileNotFoundError as e:
    print(f"❌ Błąd: Plik SQL nie został znaleziony: {e.filename}")
    exit()
except Exception as e:
    print(f"❌ Błąd podczas wczytywania plików SQL: {e}")
    exit()

# === Krok 3: Połącz się z bazą danych i pobierz dane ===
print("\n Krok 3: Pobieranie danych z bazy...")
try:
    conn = pyodbc.connect(conn_str)
    df_aktywnosci = pd.read_sql(query_aktywnosci, conn)
    df_koordynatorzy = pd.read_sql(query_koordynatorzy, conn)
    conn.close()
    print(f"✅ Pobrano {len(df_aktywnosci)} rekordów aktywności.")
    print(f"✅ Pobrano {len(df_koordynatorzy)} koordynatorów.")
except pyodbc.Error as ex:
    sqlstate = ex.args[0]
    print(f"❌ Błąd połączenia z bazą danych lub wykonania zapytania: {sqlstate}")
    exit()
except Exception as e:
    print(f"❌ Wystąpił nieoczekiwany błąd podczas operacji na bazie danych: {e}")
    exit()

# === Krok 4: Przetwarzanie i czyszczenie danych ===
print("\n Krok 4: Przetwarzanie i czyszczenie danych...")

# Ujednolicenie nazwy kolumny-klucza (loginu koordynatora)
print(" -> Ujednolicanie nazwy kolumny kluczowej...")
df_koordynatorzy.rename(columns={'LoginWindows': 'PrzelozonyLoginWindows'}, inplace=True)
print("✅ Nazwa kolumny koordynatora ujednolicona.")

# Filtrowanie ról, aby analizować tylko konsultantów
if 'RolaNazwa' in df_aktywnosci.columns:
    print(" -> Filtrowanie ról konsultantów...")
    role_konsultantow = ['Agent', 'Pre-Ekspert', 'Ekspert']
    df_aktywnosci = df_aktywnosci[df_aktywnosci['RolaNazwa'].isin(role_konsultantow)]
    print(f"✅ Dane przefiltrowane. Pozostało {len(df_aktywnosci)} rekordów.")

# Konwersja typów dat i obsługa braku danych
if df_aktywnosci.empty:
    print("⚠️ Ostrzeżenie: Brak danych o aktywnościach do przetworzenia. Raport może być niekompletny.")
    df = pd.DataFrame(columns=['StatusDateTime', 'EndDateTime', 'UserId', 'Wydzial', 'PrzelozonyLoginWindows'])
else:
    df = df_aktywnosci.copy()
    df['StatusDateTime'] = pd.to_datetime(df['StatusDateTime'])
    df['EndDateTime'] = pd.to_datetime(df['EndDateTime'])


# Funkcja dzieląca sesje na godzinowe interwały
def calculate_seconds(row):
    start = row['StatusDateTime']
    end = row['EndDateTime']
    intervals = []
    while start < end:
        next_hour = (start + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
        if next_hour > end:
            next_hour = end
        seconds = (next_hour - start).total_seconds()
        # Przekazujemy login przełożonego do dalszej analizy
        intervals.append((start.hour, seconds, row['UserId'], row['Wydzial'], row['PrzelozonyLoginWindows']))
        start = next_hour
    return intervals

# Przetwarzanie interwałów
print(" -> Obliczanie interwałów godzinowych...")
intervals = []
if not df.empty:
    for _, row in df.iterrows():
        intervals.extend(calculate_seconds(row))

intervals_df = pd.DataFrame(intervals, columns=['Hour', 'Seconds', 'UserId', 'Wydzial', 'PrzelozonyLoginWindows'])

# --- POCZĄTEK ORYGINALNEJ LOGIKI PRZETWARZANIA DLA GŁÓWNEGO RAPORTU ---
# Ta sekcja jest w całości zachowana z Twojego oryginalnego kodu

grouped = intervals_df.groupby('Hour').agg({'Seconds': 'sum'}).reset_index()
unique_users = intervals_df.groupby('Hour')['UserId'].nunique().reset_index()
unique_users.columns = ['Hour', 'UniqueConsultants']
all_hours = pd.DataFrame({'Hour': range(24)})
grouped = pd.merge(all_hours, grouped, on='Hour', how='left')
grouped = pd.merge(grouped, unique_users, on='Hour', how='left').fillna(0)

def seconds_to_minutes(seconds):
    return round(seconds / 60)

grouped['Seconds'] = grouped['Seconds'].apply(seconds_to_minutes)
departments = ['WZK1', 'WZK2', 'WZK3', 'WZF', 'WNT', 'WZP']
for dept in departments:
    dept_seconds = intervals_df[intervals_df['Wydzial'] == dept].groupby('Hour')['Seconds'].sum().reset_index()
    dept_seconds.columns = ['Hour', dept]
    grouped = pd.merge(grouped, dept_seconds, on='Hour', how='left').fillna(0)
    grouped[dept] = grouped[dept].apply(seconds_to_minutes)

def max_simultaneous_consultants(df_current_hour, hour):
    base_date = df_current_hour['StatusDateTime'].dt.normalize().min() if not df_current_hour.empty else datetime.now().normalize()
    hour_start = base_date + pd.Timedelta(hours=hour)
    hour_end = hour_start + pd.Timedelta(hours=1)
    df_hour = df_current_hour[(df_current_hour['StatusDateTime'] < hour_end) & (df_current_hour['EndDateTime'] > hour_start)]
    timeline = []
    for _, row in df_hour.iterrows():
        start = max(row['StatusDateTime'], hour_start)
        end = min(row['EndDateTime'], hour_end)
        timeline.append((start, 1))
        timeline.append((end, -1))
    timeline.sort()
    active = 0; interval_start = None; interval_active = 0; valid_intervals = []
    over_total_limit_seconds = [0.0] * 6
    if not timeline:
        return 0, pd.NaT, pd.NaT, *over_total_limit_seconds

    current_time = hour_start
    for time, change in timeline:
        if time > current_time and interval_active is not None:
            duration = (time - current_time).total_seconds()
            for i in range(6):
                if interval_active >= (TOTAL_LIMIT + 1 + i):
                    over_total_limit_seconds[i] += duration
            if duration >= 60 and interval_active >= 2:
                valid_intervals.append((current_time, time, interval_active))

        active += change
        current_time = time
        interval_active = active

    if current_time < hour_end:
        duration = (hour_end - current_time).total_seconds()
        for i in range(6):
            if interval_active >= (TOTAL_LIMIT + 1 + i):
                over_total_limit_seconds[i] += duration
        if duration >= 60 and interval_active >= 2:
            valid_intervals.append((current_time, hour_end, interval_active))

    if valid_intervals:
        max_interval = max(valid_intervals, key=lambda x: x[2])
        return (max_interval[2], max_interval[0], max_interval[1], *over_total_limit_seconds)
    else:
        max_active = 0
        active = 0
        for time, change in timeline:
            active += change
            if active > max_active:
                max_active = active
        return (max_active, pd.NaT, pd.NaT, *over_total_limit_seconds)

def time_over_dept_limit(df_current_hour, hour, department):
    base_date = df_current_hour['StatusDateTime'].dt.normalize().min() if not df_current_hour.empty else datetime.now().normalize()
    hour_start = base_date + pd.Timedelta(hours=hour)
    hour_end = hour_start + pd.Timedelta(hours=1)
    df_hour_dept = df_current_hour[
        (df_current_hour['StatusDateTime'] < hour_end) & (df_current_hour['EndDateTime'] > hour_start) & (
                    df_current_hour['Wydzial'] == department)]
    if df_hour_dept.empty:
        return 0.0

    timeline = []
    for _, row in df_hour_dept.iterrows():
        start = max(row['StatusDateTime'], hour_start)
        end = min(row['EndDateTime'], hour_end)
        timeline.append((start, 1))
        timeline.append((end, -1))
    timeline.sort()

    active = 0; over_limit_time = 0.0
    current_time = hour_start
    for time, change in timeline:
        if time > current_time:
            duration = (time - current_time).total_seconds()
            if active > DEPT_LIMIT:
                over_limit_time += duration

        active += change
        current_time = time

    if current_time < hour_end:
        duration = (hour_end - current_time).total_seconds()
        if active > DEPT_LIMIT:
            over_limit_time += duration

    return over_limit_time

total_cols = [f'Over{TOTAL_LIMIT + 1 + i}ConsultantsMinutes' for i in range(6)]
results = grouped['Hour'].apply(lambda h: max_simultaneous_consultants(df, h))
result_cols = ['MaxConsultants', 'MaxConsultantsStart', 'MaxConsultantsEnd'] + total_cols
temp_df = pd.DataFrame(results.tolist(), columns=result_cols, index=grouped.index)
grouped = pd.concat([grouped, temp_df], axis=1)

for dept in departments:
    grouped[f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes'] = grouped['Hour'].apply(lambda h: time_over_dept_limit(df, h, dept))

cols_to_convert = total_cols + [f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes' for dept in departments]
for col in cols_to_convert:
    if col in grouped.columns:
        grouped[col] = grouped[col].apply(seconds_to_minutes)

print("✅ Dane dla raportu głównego przetworzone w całości.")
# --- KONIEC ORYGINALNEJ LOGIKI PRZETWARZANIA ---


# === Krok 5: Zapisanie danych do pliku CSV ===
report_date_str_for_filename = df['StatusDateTime'].min().normalize().strftime("%Y-%m-%d") if not df.empty else datetime.now().strftime("%Y-%m-%d")
csv_filename = f"raport_dzienny_{report_date_str_for_filename}.csv"
grouped.to_csv(csv_filename, index=False, encoding='utf-8-sig')
print(f"✅ Dane raportu zostały zapisane do pliku: {csv_filename}")

# === Krok 6: Generowanie wizualizacji ===
image_buffers = []
if generate_plots:
    print("\n Krok 6: Generowanie wizualizacji...")
    plt.style.use('default')

    # --- WYKRES 1 i 2: ORYGINALNE WYKRESY (Z POPRAWKAMI TEKSTOWYMI) ---
    print(" -> Generowanie oryginalnych wykresów (1 i 2)...")

    # WYKRES 1: Suma minut przekroczenia
    fig, ax = plt.subplots(figsize=(16, 10))
    heatmap_data = grouped[total_cols].T
    heatmap_data.columns = [f"{h:02d}:00" for h in grouped['Hour']]
    heatmap_data.index = [f'≥{TOTAL_LIMIT + 1 + i} osób' for i in range(6)]
    colors = ['#ffffff', '#ffe6e6', '#ffcccc', '#ff9999', '#ff6666', '#ff3333', '#cc0000']
    cmap = LinearSegmentedColormap.from_list('custom_red', colors, N=100)
    im = ax.imshow(heatmap_data.values, cmap=cmap, aspect='auto', interpolation='nearest', vmin=0)
    ax.set_xlim(-0.5, len(heatmap_data.columns) - 0.5); ax.set_ylim(-0.5, len(heatmap_data.index) - 0.5)
    ax.set_xticks(range(0, len(heatmap_data.columns), 2)); ax.set_xticklabels([heatmap_data.columns[i] for i in range(0, len(heatmap_data.columns), 2)], fontsize=11, rotation=45)
    ax.set_yticks(range(len(heatmap_data.index))); ax.set_yticklabels(heatmap_data.index, fontsize=12, fontweight='bold')
    for i in range(len(heatmap_data.index)):
        for j in range(len(heatmap_data.columns)):
            value = heatmap_data.iloc[i, j]
            if value > 0:
                text_color = 'white' if value > heatmap_data.values.max() * 0.6 else 'black'
                ax.text(j, i, f'{int(value)}', ha='center', va='center', fontsize=10, fontweight='bold', color=text_color)
    cbar = plt.colorbar(im, ax=ax, shrink=0.8, aspect=30); cbar.set_label('Minuty przekroczenia', fontsize=12, fontweight='bold'); cbar.ax.tick_params(labelsize=11)
    plt.title('Suma minut przekroczenia w danym interwale dla danej liczby osób', fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel('Godzina', fontsize=14, fontweight='bold'); ax.set_ylabel('Próg liczby konsultantów', fontsize=14, fontweight='bold')
    plt.tight_layout()
    img_buffer_1 = io.BytesIO()
    plt.savefig(img_buffer_1, format='png', dpi=300, bbox_inches='tight', facecolor='white')
    img_buffer_1.seek(0)
    image_buffers.append(img_buffer_1)
    plt.close()

    # WYKRES 2: Dashboard naruszeń wydziałowych
    fig = plt.figure(figsize=(18, 12))
    ax_main = plt.subplot2grid((4, 4), (0, 0), colspan=3, rowspan=3)
    dept_heatmap_cols = [f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes' for dept in departments]
    df_heatmap = grouped.set_index('Hour')[dept_heatmap_cols].T
    df_heatmap.columns = [f"{h:02d}:00" for h in grouped['Hour']]; df_heatmap.index = departments
    colors_blue = ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#084594']
    cmap_blue = LinearSegmentedColormap.from_list('custom_blue', colors_blue, N=100)
    im = ax_main.imshow(df_heatmap.values, cmap=cmap_blue, aspect='auto', interpolation='nearest', vmin=0)
    ax_main.set_xlim(-0.5, len(df_heatmap.columns) - 0.5); ax_main.set_ylim(-0.5, len(df_heatmap.index) - 0.5)
    ax_main.set_xticks(range(0, len(df_heatmap.columns), 2)); ax_main.set_xticklabels([df_heatmap.columns[i] for i in range(0, len(df_heatmap.columns), 2)], fontsize=11, rotation=45)
    ax_main.set_yticks(range(len(df_heatmap.index))); ax_main.set_yticklabels(df_heatmap.index, fontsize=12, fontweight='bold')
    for i in range(len(df_heatmap.index)):
        for j in range(len(df_heatmap.columns)):
            value = df_heatmap.iloc[i, j]
            if value > 0:
                text_color = 'white' if value > df_heatmap.values.max() * 0.6 else 'black'
                ax_main.text(j, i, f'{int(value)}', ha='center', va='center', fontsize=9, fontweight='bold', color=text_color)
    ax_main.set_title(f'Dashboard naruszeń limitów wydziałowych (minuty z >{DEPT_LIMIT} konsultantami)', fontsize=14, fontweight='bold', pad=15)
    ax_main.set_ylabel('Wydział', fontsize=12, fontweight='bold')
    ax_right = plt.subplot2grid((4, 4), (0, 3), rowspan=3)
    dept_sums = [grouped[f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes'].sum() for dept in departments]
    colors_dept = plt.cm.Set3(np.linspace(0, 1, len(departments)))
    bars_right = ax_right.barh(range(len(departments)), dept_sums, color=colors_dept, alpha=0.8)
    ax_right.set_yticks(range(len(departments))); ax_right.set_yticklabels(departments, fontsize=10)
    ax_right.set_xlabel('Suma minut', fontsize=11, fontweight='bold'); ax_right.set_title('Suma\nna wydział', fontsize=12, fontweight='bold')
    ax_bottom = plt.subplot2grid((4, 4), (3, 0), colspan=3)
    hour_sums = [grouped[dept_heatmap_cols].iloc[h].sum() for h in range(24)]
    bars_bottom = ax_bottom.bar(range(24), hour_sums, color='steelblue', alpha=0.7)
    ax_bottom.set_xlim(-0.5, 23.5); ax_bottom.set_xticks(range(0, 24, 2)); ax_bottom.set_xticklabels([f"{h:02d}:00" for h in range(0, 24, 2)], fontsize=10)
    ax_bottom.set_xlabel('Godzina', fontsize=11, fontweight='bold'); ax_bottom.set_ylabel('Suma minut', fontsize=11, fontweight='bold'); ax_bottom.set_title('Suma na godzinę', fontsize=12, fontweight='bold')
    cbar = plt.colorbar(im, ax=ax_main, shrink=0.8, aspect=20); cbar.set_label('Minuty', fontsize=11, fontweight='bold')
    plt.tight_layout(pad=2.0)
    img_buffer_2 = io.BytesIO()
    plt.savefig(img_buffer_2, format='png', dpi=300, bbox_inches='tight', facecolor='white')
    img_buffer_2.seek(0)
    image_buffers.append(img_buffer_2)
    plt.close()
    
    # === NOWA SEKCJA: Generowanie Dashboardów dla Koordynatorów per Wydział ===
    print(" -> Rozpoczynanie generowania dashboardów dla koordynatorów...")
    
    # Definicja różnych palet kolorów dla każdego wydziału
    color_maps = ['Greens', 'Blues', 'Oranges', 'Purples', 'Reds', 'Greys']
    
    unique_departments_from_map = sorted(df_koordynatorzy['Wydzial'].unique())

    for i, dept in enumerate(unique_departments_from_map):
        print(f"   -> Generowanie dashboardu dla wydziału: {dept}")
        
        # Wybór palety kolorów dla bieżącego wydziału
        cmap_name = color_maps[i % len(color_maps)]
        bar_color = plt.get_cmap(cmap_name)(0.6)
        bar_color_light = plt.get_cmap(cmap_name)(0.4)
        
        aktywnosci_w_dziale = intervals_df[intervals_df['Wydzial'] == dept]
        koordynatorzy_grouped = aktywnosci_w_dziale.groupby(['Hour', 'PrzelozonyLoginWindows']).agg({'Seconds': 'sum'}).reset_index()
        koordynatorzy_grouped['Minutes'] = (koordynatorzy_grouped['Seconds'] / 60).round()

        pelna_lista_koordynatorow = df_koordynatorzy[df_koordynatorzy['Wydzial'] == dept]['PrzelozonyLoginWindows'].unique()
        
        if len(pelna_lista_koordynatorow) == 0:
            print(f"   ⚠️ Pomijanie wydziału {dept} - brak zdefiniowanych koordynatorów.")
            continue

        heatmap_data_koordynatorzy = koordynatorzy_grouped.pivot_table(
            index='PrzelozonyLoginWindows', columns='Hour', values='Minutes'
        ).reindex(pelna_lista_koordynatorow).fillna(0)

        fig_height = max(8, len(pelna_lista_koordynatorow) * 0.9)
        fig = plt.figure(figsize=(18, fig_height))
        
        ax_main = plt.subplot2grid((4, 4), (0, 0), colspan=3, rowspan=3)
        im = ax_main.imshow(heatmap_data_koordynatorzy.values, cmap=cmap_name, aspect='auto', interpolation='nearest', vmin=0)
        ax_main.set_xticks(np.arange(heatmap_data_koordynatorzy.shape[1]))
        ax_main.set_xticklabels([f"{h:02d}:00" for h in heatmap_data_koordynatorzy.columns], rotation=45, ha="right")
        ax_main.set_yticks(np.arange(len(pelna_lista_koordynatorow)))
        ax_main.set_yticklabels(heatmap_data_koordynatorzy.index, fontweight='bold')
        ax_main.set_title('Minuty na statusie koordynatorskim per godzinę', fontsize=12)

        for r in range(len(pelna_lista_koordynatorow)):
            for c in range(heatmap_data_koordynatorzy.shape[1]):
                value = heatmap_data_koordynatorzy.iloc[r, c]
                if value > 0:
                    text_color = 'white' if value > heatmap_data_koordynatorzy.values.max() * 0.5 else 'black'
                    ax_main.text(c, r, f'{int(value)}', ha='center', va='center', color=text_color, fontsize=9, fontweight='bold')
        
        ax_right = plt.subplot2grid((4, 4), (0, 3), rowspan=3)
        sumy_koordynatorow = heatmap_data_koordynatorzy.sum(axis=1)
        ax_right.barh(sumy_koordynatorow.index, sumy_koordynatorow.values, color=bar_color, alpha=0.8)
        ax_right.set_title('Suma minut na koordynatora', fontsize=12)
        ax_right.get_yaxis().set_visible(False)
        ax_right.invert_yaxis()
        
        ax_bottom = plt.subplot2grid((4, 4), (3, 0), colspan=3)
        sumy_godzinowe = heatmap_data_koordynatorzy.sum(axis=0)
        ax_bottom.bar(sumy_godzinowe.index, sumy_godzinowe.values, color=bar_color_light, alpha=0.7)
        ax_bottom.set_title('Suma minut na godzinę (zespoły w wydziale)', fontsize=12)
        ax_bottom.set_xticks(np.arange(0, 24, 2))
        ax_bottom.set_xlim(-0.5, 23.5)

        fig.suptitle(f"Dashboard Aktywności Koordynatorów - Wydział {dept}", fontsize=18, fontweight='bold')
        plt.tight_layout(rect=[0, 0.03, 1, 0.95])
        
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=200, bbox_inches='tight', facecolor='white')
        img_buffer.seek(0)
        image_buffers.append(img_buffer)
        plt.close(fig)

    print("✅ Wszystkie wizualizacje wygenerowane.")
else:
    print("\n Krok 6: Generowanie wizualizacji pominięte (zgodnie z konfiguracją).")

# === Krok 7: Budowanie finalnej treści HTML e-maila ===
print("\n Krok 7: Budowanie treści e-maila...")

total_seconds_today = intervals_df['Seconds'].sum()
used_rbh = total_seconds_today / 3600.0
remaining_rbh = limit_rbh - used_rbh
limit_rbh_formatted = f"{limit_rbh:.2f}"
used_rbh_formatted = f"{used_rbh:.2f}"
remaining_rbh_formatted = f"{remaining_rbh:.2f}"

report_date = df['StatusDateTime'].min().normalize() if not df.empty else datetime.now().normalize()
day_names_polish = {'Monday': 'Poniedziałek', 'Tuesday': 'Wtorek', 'Wednesday': 'Środa', 'Thursday': 'Czwartek', 'Friday': 'Piątek', 'Saturday': 'Sobota', 'Sunday': 'Niedziela'}
english_day = report_date.strftime("%A")
polish_day = day_names_polish.get(english_day, english_day)
today_str = report_date.strftime(f"%Y-%m-%d {polish_day}")

header_titles = [("Interwał", 60)]
for i in range(6):
    header_titles.append((f"min. przy ≥{TOTAL_LIMIT + 1 + i} os.", 40))
for dept in departments:
    header_titles.append((f"min. przy >{DEPT_LIMIT} {dept}", 40))

final_html_content = f"""\
<!DOCTYPE html>
<html>
<head>
<meta name="color-scheme" content="light dark">
<meta name="supported-color-schemes" content="light dark">
</head>
<body style="background-color:#ffffff; font-family: Arial, sans-serif;">
<p style="font-size:12px; color:#000000;">
<strong>Data:</strong> {today_str}<br>
<strong>Limit w tym miesiącu:</strong> {limit_rbh_formatted} RBH<br>
<strong>Wykorzystano:</strong> {used_rbh_formatted} RBH<br>
<strong>Pozostało:</strong> {remaining_rbh_formatted} RBH</p>
"""

final_html_content += f"""
<table border="1" cellpadding="3" cellspacing="0" style="border-collapse:collapse; background-color:#ffffff; width: 900px;"><tr>
"""
for title, width in header_titles:
    final_html_content += f'<th style="font-family: Arial, sans-serif; font-size:9px; width:{width}px; background-color:#e0e0e0; color:#000000; text-align:center;">{title}</th>'
final_html_content += "</tr>"

for idx, row in grouped.iterrows():
    row_bg_color = "#f2f2f2" if idx % 2 == 0 else "#ffffff"
    final_html_content += "<tr>"
    final_html_content += f'<td style="font-family: Arial, sans-serif; font-size:9px; width:60px; background-color:{row_bg_color}; color:#000000; text-align:center;">{row["Hour"]:02}:00</td>'
    for col in total_cols:
        val = row.get(col, 0)
        display = '' if val == 0 else f'<b>{int(val)}</b>'
        cell_bg_color = '#ffcccc' if val > 0 else row_bg_color
        final_html_content += f'<td style="font-family: Arial, sans-serif; font-size:9px; width:40px; background-color:{cell_bg_color}; color:#000000; text-align:center;">{display}</td>'
    for dept in departments:
        col = f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes'
        val = row.get(col, 0)
        display = '' if val == 0 else f'<b>{int(val)}</b>'
        cell_bg_color = '#ffcccc' if val > 0 else row_bg_color
        final_html_content += f'<td style="font-family: Arial, sans-serif; font-size:9px; width:40px; background-color:{cell_bg_color}; color:#000000; text-align:center;">{display}</td>'
    final_html_content += "</tr>"

final_html_content += '<tr><td style="font-family: Arial, sans-serif; font-size:9px; width:60px; background-color:#e0e0e0; color:#000000; text-align:center;"><strong>Suma</strong></td>'
for col in total_cols + [f'{dept}_Over{DEPT_LIMIT}ConsultantsMinutes' for dept in departments]:
    total_sum = grouped[col].sum() if col in grouped.columns else 0
    display_sum = '' if total_sum == 0 else f'<b>{int(total_sum)}</b>'
    sum_bg_color = '#ffcccc' if total_sum > 0 else '#e0e0e0'
    final_html_content += f'<td style="font-family: Arial, sans-serif; font-size:9px; width:40px; background-color:{sum_bg_color}; color:#000000; text-align:center;">{display_sum}</td>'
final_html_content += "</tr></table>"

if generate_plots and image_buffers:
    for i, _ in enumerate(image_buffers):
        # Dodajemy <br> przed każdą grafiką, aby zapewnić spójny odstęp
        final_html_content += f'<br><img src="cid:image{i}" style="width: 900px; height: auto; display: block; border: 1px solid #ccc;">'

final_html_content += "</body></html>"
print("✅ Treść e-maila gotowa.")

# === Krok 8: Wysyłka e-maila ===
print("\n Krok 8: Wysyłanie e-maila...")
msg = MIMEMultipart('related')
msg['From'] = sender_email
msg['To'] = receiver_email
msg['Subject'] = Header(subject, 'utf-8')
html_part = MIMEText(final_html_content, 'html', 'utf-8')
msg.attach(html_part)

if generate_plots and image_buffers:
    for i, img_buffer in enumerate(image_buffers):
        img = MIMEImage(img_buffer.read())
        img.add_header('Content-ID', f'<image{i}>')
        img_buffer.close()
        msg.attach(img)

try:
    with smtplib.SMTP(smtp_server) as server:
        server.sendmail(sender_email, receiver_email.split(','), msg.as_string())
    print("✅ E-mail został pomyślnie wysłany!")
except Exception as e:
    print(f"❌ Wystąpił błąd podczas wysyłania e-maila: {e}")

print("\n--- Zakończono pracę skryptu ---")
