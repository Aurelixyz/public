import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import configparser
import pyodbc
import pandas as pd
from datetime import datetime, timedelta

# === Krok 1: Wczytaj dane konfiguracyjne ===
config = configparser.ConfigParser()
config.read('config.ini')

sender_email = config.get('EMAIL', 'Sender')
receiver_email = config.get('EMAIL', 'Receiver')
smtp_server = config.get('EMAIL', 'SMTPServer')
subject = config.get('EMAIL', 'Subject')
conn_str = config.get('DATABASE', 'ConnectionString')

# === Krok 2: Wczytaj zapytanie SQL z pliku ===
with open("zapytanieREPLIKA.sql", "r", encoding="utf-8") as file:
    query = file.read()

# === Krok 3: Połącz się z bazą danych i wykonaj zapytanie ===
conn = pyodbc.connect(conn_str)
cursor = conn.cursor()
cursor.execute(query)
rows = cursor.fetchall()
columns = [column[0] for column in cursor.description]
df = pd.DataFrame.from_records(rows, columns=columns)

df['StatusDateTime'] = pd.to_datetime(df['StatusDateTime'])
df['EndDateTime'] = pd.to_datetime(df['EndDateTime'])

# === Krok 4: Przetwórz dane ===
def calculate_seconds(row):
    start = row['StatusDateTime']
    end = row['EndDateTime']
    intervals = []

    while start < end:
        next_hour = (start + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
        if next_hour > end:
            next_hour = end
        seconds = (next_hour - start).total_seconds()
        intervals.append((start.hour, seconds, row['UserId'], row['Wydzial']))
        start = next_hour

    return intervals

intervals = []
for _, row in df.iterrows():
    intervals.extend(calculate_seconds(row))

intervals_df = pd.DataFrame(intervals, columns=['Hour', 'Seconds', 'UserId', 'Wydzial'])

grouped = intervals_df.groupby('Hour').agg({'Seconds': 'sum'}).reset_index()
unique_users = intervals_df.groupby('Hour')['UserId'].nunique().reset_index()
unique_users.columns = ['Hour', 'UniqueConsultants']
grouped = pd.merge(grouped, unique_users, on='Hour', how='left').fillna(0)

all_hours = pd.DataFrame({'Hour': range(24)})
grouped = pd.merge(all_hours, grouped, on='Hour', how='left').fillna(0)

def seconds_to_minutes(seconds):
    return round(seconds / 60)

grouped['Seconds'] = grouped['Seconds'].apply(seconds_to_minutes)

departments = ['WZK1', 'WZK2', 'WZK3', 'WZF', 'WNT', 'WZP']
for dept in departments:
    dept_seconds = intervals_df[intervals_df['Wydzial'] == dept].groupby('Hour')['Seconds'].sum().reset_index()
    dept_seconds.columns = ['Hour', dept]
    grouped = pd.merge(grouped, dept_seconds, on='Hour', how='left').fillna(0)
    grouped[dept] = grouped[dept].apply(seconds_to_minutes)

def max_simultaneous_consultants(df, hour):
    base_date = df['StatusDateTime'].dt.normalize().min()
    hour_start = base_date + pd.Timedelta(hours=hour)
    hour_end = hour_start + pd.Timedelta(hours=1)

    df_hour = df[(df['StatusDateTime'] < hour_end) & (df['EndDateTime'] > hour_start)]

    timeline = []
    for _, row in df_hour.iterrows():
        start = max(row['StatusDateTime'], hour_start)
        end = min(row['EndDateTime'], hour_end)
        timeline.append((start, 1))
        timeline.append((end, -1))
    timeline.sort()

    active = 0
    interval_start = None
    interval_active = 0
    valid_intervals = []
    over19_time = 0.0
    over20_time = 0.0
    over21_time = 0.0
    over22_time = 0.0
    over23_time = 0.0
    over24_time = 0.0

    for i, (time, change) in enumerate(timeline):
        prev_active = active
        active += change

        if prev_active != active:
            if interval_start is not None:
                duration = (time - interval_start).total_seconds()
                if interval_active >= 19: over19_time += duration
                if interval_active >= 20: over20_time += duration
                if interval_active >= 21: over21_time += duration
                if interval_active >= 22: over22_time += duration
                if interval_active >= 23: over23_time += duration
                if interval_active >= 24: over24_time += duration
                if duration >= 60 and interval_active >= 2:
                    valid_intervals.append((interval_start, time, interval_active))
            interval_start = time
            interval_active = active

    if interval_start is not None:
        duration = (hour_end - interval_start).total_seconds()
        if interval_active >= 19: over19_time += duration
        if interval_active >= 20: over20_time += duration
        if interval_active >= 21: over21_time += duration
        if interval_active >= 22: over22_time += duration
        if interval_active >= 23: over23_time += duration
        if interval_active >= 24: over24_time += duration
        if duration >= 60 and interval_active >= 2:
            valid_intervals.append((interval_start, hour_end, interval_active))

    if valid_intervals:
        max_interval = max(valid_intervals, key=lambda x: x[2])
        return (
            max_interval[2], max_interval[0], max_interval[1],
            over19_time, over20_time, over21_time,
            over22_time, over23_time, over24_time
        )
    else:
        return 0, pd.NaT, pd.NaT, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0

def max_simultaneous_consultants_by_department(df, hour, department):
    df_dept = df[df['Wydzial'] == department]
    return max_simultaneous_consultants(df_dept, hour)[:3]

def time_over_3_per_department(df, hour, department):
    base_date = df['StatusDateTime'].dt.normalize().min()
    hour_start = base_date + pd.Timedelta(hours=hour)
    hour_end = hour_start + pd.Timedelta(hours=1)

    df_hour_dept = df[(df['StatusDateTime'] < hour_end) & (df['EndDateTime'] > hour_start) & (df['Wydzial'] == department)]

    timeline = []
    for _, row in df_hour_dept.iterrows():
        start = max(row['StatusDateTime'], hour_start)
        end = min(row['EndDateTime'], hour_end)
        timeline.append((start, 1))
        timeline.append((end, -1))
    timeline.sort()

    active = 0
    interval_start = None
    interval_active = 0
    over3_time = 0.0

    for i, (time, change) in enumerate(timeline):
        prev_active = active
        active += change

        if prev_active != active:
            if interval_start is not None:
                duration = (time - interval_start).total_seconds()
                if interval_active > 3:
                    over3_time += duration
            interval_start = time
            interval_active = active

    if interval_start is not None:
        duration = (hour_end - interval_start).total_seconds()
        if interval_active > 3:
            over3_time += duration

    return over3_time

grouped['MaxConsultants'], grouped['MaxConsultantsStart'], grouped['MaxConsultantsEnd'], \
grouped['Over19Seconds'], grouped['Over20Seconds'], grouped['Over21Seconds'], grouped['Over22Seconds'], \
grouped['Over23Seconds'], grouped['Over24Seconds'] = zip(
    *grouped['Hour'].apply(lambda h: max_simultaneous_consultants(df, h))
)

for dept in departments:
    grouped[f'{dept}_MaxConsultants'], grouped[f'{dept}_MaxConsultantsStart'], grouped[f'{dept}_MaxConsultantsEnd'] = zip(
        *grouped['Hour'].apply(lambda h: max_simultaneous_consultants_by_department(df, h, dept))
    )
    grouped[f'{dept}_Over3Seconds'] = grouped['Hour'].apply(
        lambda h: time_over_3_per_department(df, h, dept)
    )

for col in ['Over19Seconds', 'Over20Seconds', 'Over21Seconds', 'Over22Seconds', 'Over23Seconds', 'Over24Seconds'] + \
           [f'{dept}_Over3Seconds' for dept in departments]:
    grouped[col] = grouped[col].apply(seconds_to_minutes)

# === Krok 6: HTML z naprzemiennym kolorowaniem wierszy ===
report_date = df['StatusDateTime'].min().normalize()
today_str = report_date.strftime("%Y-%m-%d %A")

html_content = f"""
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <title>Raport dzienny</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
        }}
        table {{
            border-collapse: collapse;
            font-size: 9px;
            width: auto;
            margin: 20px auto;
        }}
        th, td {{
            border: 1px solid #000;
            text-align: center;
            padding: 3px;
            font-size: 9px;
        }}
    </style>
</head>
<body>
    <p><strong>Data:</strong> {today_str}<br>
    <strong>Limit w tym miesiącu:</strong> 1500 RBH<br>
    <strong>Wykorzystano:</strong> 45 RBH<br>
    <strong>Pozostało:</strong> 1455 RBH</p>

    <table>
        <thead>
            <tr>
                <th>Interwał</th>
                <th>19 os.</th>
                <th>20 os.</th>
                <th>21 os.</th>
                <th>22 os.</th>
                <th>23 os.</th>
                <th>24+ os.</th>
"""

for dept in departments:
    col = f'{dept}_Over3Seconds'
    if col in grouped.columns and grouped[col].sum() > 0:
        html_content += f"<th>>3 {dept}</th>"

html_content += "</tr></thead><tbody>"

for idx, row in grouped.iterrows():
    interval = f"{row['Hour']:02}:00"
    row_style = 'background-color: #f2f2f2;' if idx % 2 == 0 else 'background-color: #ffffff;'
    html_content += f"<tr style='{row_style}'><td>{interval}</td>"

    for col in ['Over19Seconds', 'Over20Seconds', 'Over21Seconds', 'Over22Seconds', 'Over23Seconds', 'Over24Seconds']:
        val = row[col]
        display = '' if val == 0 else val
        html_content += f"<td>{display}</td>"

    for dept in departments:
        col = f'{dept}_Over3Seconds'
        if col in grouped.columns and grouped[col].sum() > 0:
            val = row[col]
            display = '' if val == 0 else val
            html_content += f"<td>{display}</td>"

    html_content += "</tr>"

# Dodaj wiersz sumy
html_content += "<tr><td><strong>Suma</strong></td>"
for col in ['Over19Seconds', 'Over20Seconds', 'Over21Seconds', 'Over22Seconds', 'Over23Seconds', 'Over24Seconds']:
    html_content += f"<td>{grouped[col].sum()}</td>"
for dept in departments:
    col = f'{dept}_Over3Seconds'
    if col in grouped.columns and grouped[col].sum() > 0:
        html_content += f"<td>{grouped[col].sum()}</td>"
html_content += "</tr>"

html_content += "</tbody></table></body></html>"

# === Krok 7: Wyślij e-mail ===
msg = MIMEMultipart()
msg['From'] = sender_email
msg['To'] = receiver_email
msg['Subject'] = subject
msg.attach(MIMEText(html_content, 'html'))

try:
    with smtplib.SMTP(smtp_server) as server:
        server.sendmail(sender_email, receiver_email, msg.as_string())
    print("✅ E-mail został wysłany z tabelą HTML.")
except Exception as e:
    print(f"❌ Wystąpił błąd podczas wysyłania e-maila: {e}")